name: Security Scans

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # SAST (Static Application Security Testing)
  sast-scan:
    name: SAST Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/react
            p/typescript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: [ll, auth, user, restaurant, notification]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        if: matrix.directory == 'll'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=${{ matrix.directory }}/package.json

      - name: Run Snyk for Go dependencies
        uses: snyk/actions/golang@master
        if: matrix.directory != 'll'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=${{ matrix.directory }}/go.mod

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: |
          docker build -t lezzet-frontend:scan ./ll
          docker build -t lezzet-notification:scan ./notification

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'lezzet-frontend:scan'
          format: 'sarif'
          output: 'trivy-frontend.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-frontend.sarif'

  # License compliance
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ll/package-lock.json

      - name: Install dependencies
        working-directory: ./ll
        run: npm ci

      - name: Run license checker
        working-directory: ./ll
        run: |
          npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD'

  # Security policy compliance
  security-policy:
    name: Security Policy Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security policy
        run: |
          if [ ! -f SECURITY.md ]; then
            echo "⚠️ SECURITY.md file not found!"
            echo "Creating basic security policy template..."
            cat > SECURITY.md << 'EOF'
          # Security Policy
          
          ## Reporting Security Vulnerabilities
          
          Please report security vulnerabilities to: security@lezzetlimani.com
          
          ## Supported Versions
          
          | Version | Supported          |
          | ------- | ------------------ |
          | 1.x.x   | :white_check_mark: |
          
          EOF
          fi

      - name: Verify .env files are in .gitignore
        run: |
          if ! grep -q "\.env" .gitignore; then
            echo "❌ .env files should be in .gitignore"
            exit 1
          fi
          echo "✅ .env files are properly ignored"

      - name: Check for hardcoded secrets
        run: |
          echo "Scanning for potential hardcoded secrets..."
          if grep -r -n -E "(password|secret|key|token)\s*=\s*['\"][^'\"]+['\"]" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.go" .; then
            echo "❌ Potential hardcoded secrets found!"
            exit 1
          fi
          echo "✅ No obvious hardcoded secrets found"