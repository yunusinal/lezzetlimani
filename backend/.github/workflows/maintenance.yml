name: Maintenance & Monitoring

on:
  schedule:
    # Run dependency updates weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
    # Run health checks every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      task:
        description: 'Maintenance task to run'
        required: true
        default: 'health-check'
        type: choice
        options:
          - health-check
          - dependency-update
          - cleanup
          - performance-audit

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # Health check monitoring
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 */6 * * *' || github.event.inputs.task == 'health-check'
    steps:
      - name: Check production health
        run: |
          echo "Checking production health..."
          
          # Frontend health check
          if ! curl -f -s https://lezzetlimani.site/health >/dev/null 2>&1; then
            echo "❌ Frontend health check failed"
            echo "FRONTEND_DOWN=true" >> $GITHUB_ENV
          else
            echo "✅ Frontend is healthy"
          fi
          
          # API health checks (if accessible)
          API_ENDPOINTS=(
            "https://lezzetlimani.site/auth/health"
            "https://lezzetlimani.site/user/health"
            "https://lezzetlimani.site/restaurant/health"
            "https://lezzetlimani.site/notification/health"
          )
          
          for endpoint in "${API_ENDPOINTS[@]}"; do
            if ! curl -f -s "$endpoint" >/dev/null 2>&1; then
              echo "⚠️ $endpoint might be down or not accessible"
            else
              echo "✅ $endpoint is responding"
            fi
          done

      - name: Create health check issue
        if: env.FRONTEND_DOWN == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Production Health Check Failed',
              body: `
              ## Health Check Alert
              
              **Time**: ${new Date().toISOString()}
              **Status**: Frontend appears to be down
              
              ### Details
              - Frontend health endpoint is not responding
              - This issue was automatically created by the monitoring system
              
              ### Action Required
              Please investigate the production deployment immediately.
              
              **Auto-generated by**: Health Check Workflow
              `,
              labels: ['bug', 'production', 'urgent']
            })

  # Dependency updates
  dependency-update:
    name: Dependency Updates
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 3 * * 0' || github.event.inputs.task == 'dependency-update'
    strategy:
      matrix:
        service: [frontend, notification]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js (Frontend)
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ll/package-lock.json

      - name: Setup Go (Backend)
        if: matrix.service != 'frontend'
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Update npm dependencies
        if: matrix.service == 'frontend'
        working-directory: ./ll
        run: |
          # Update dependencies
          npm update
          npm audit fix --audit-level=moderate
          
          # Check if there are changes
          if git diff --quiet package*.json; then
            echo "NO_CHANGES=true" >> $GITHUB_ENV
          else
            echo "CHANGES_DETECTED=true" >> $GITHUB_ENV
          fi

      - name: Update Go dependencies
        if: matrix.service == 'notification'
        working-directory: ./notification
        run: |
          # Update Go modules
          go get -u ./...
          go mod tidy
          
          # Check if there are changes
          if git diff --quiet go.mod go.sum; then
            echo "NO_CHANGES=true" >> $GITHUB_ENV
          else
            echo "CHANGES_DETECTED=true" >> $GITHUB_ENV
          fi

      - name: Run tests after update
        if: env.CHANGES_DETECTED == 'true'
        run: |
          if [ "${{ matrix.service }}" == "frontend" ]; then
            cd ll && npm test
          else
            cd ${{ matrix.service }} && go test ./...
          fi

      - name: Create Pull Request
        if: env.CHANGES_DETECTED == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update ${{ matrix.service }} dependencies'
          title: '🔄 Update ${{ matrix.service }} dependencies'
          body: |
            ## Automated Dependency Update
            
            This PR contains automated dependency updates for the ${{ matrix.service }} service.
            
            ### Changes
            - Updated dependencies to latest compatible versions
            - Fixed security vulnerabilities where applicable
            - All tests are passing
            
            ### Review Notes
            - Please review the changes before merging
            - Consider running additional integration tests
            - Monitor deployment after merge
            
            **Auto-generated by**: Dependency Update Workflow
          branch: chore/update-${{ matrix.service }}-deps-${{ github.run_number }}
          labels: |
            dependencies
            maintenance
            automated

  # Cleanup old artifacts and caches
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'cleanup'
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Get all artifacts older than 30 days
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner,
              repo,
              per_page: 100
            });
            
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < thirtyDaysAgo) {
                await github.rest.actions.deleteArtifact({
                  owner,
                  repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }

      - name: Cleanup old workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Get workflow runs older than 90 days
            const ninetyDaysAgo = new Date();
            ninetyDaysAgo.setDate(ninetyDaysAgo.getDate() - 90);
            
            const workflows = await github.rest.actions.listWorkflowRunsForRepo({
              owner,
              repo,
              per_page: 100,
              status: 'completed'
            });
            
            for (const run of workflows.data.workflow_runs) {
              const createdAt = new Date(run.created_at);
              if (createdAt < ninetyDaysAgo) {
                await github.rest.actions.deleteWorkflowRun({
                  owner,
                  repo,
                  run_id: run.id
                });
                console.log(`Deleted workflow run: ${run.id}`);
              }
            }

  # Performance audit
  performance-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'performance-audit'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run Lighthouse audit
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Analyze bundle size
        working-directory: ./ll
        run: |
          npm ci
          npm run build
          npm run bundle-size

      - name: Create performance report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Create performance report issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '📊 Weekly Performance Audit Report',
              body: `
              ## Performance Audit Report
              
              **Date**: ${new Date().toISOString().split('T')[0]}
              **Triggered by**: ${context.actor}
              
              ### Lighthouse Results
              - Performance audit completed
              - Results available in workflow artifacts
              
              ### Bundle Size Analysis
              - Bundle size analysis completed
              - Check for any significant increases
              
              ### Recommendations
              - Monitor Core Web Vitals
              - Optimize largest contentful paint
              - Minimize cumulative layout shift
              
              **Auto-generated by**: Performance Audit Workflow
              `,
              labels: ['performance', 'monitoring', 'report']
            })

  # Security monitoring
  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 3 * * 0'
    steps:
      - name: Check for security advisories
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Check for any open security advisories
            try {
              const advisories = await github.rest.repos.listSecurityAdvisories({
                owner,
                repo,
                state: 'published'
              });
              
              if (advisories.data.length > 0) {
                console.log(`Found ${advisories.data.length} security advisories`);
                
                // Create issue for security review
                await github.rest.issues.create({
                  owner,
                  repo,
                  title: '🔒 Security Advisories Review Required',
                  body: `
                  ## Security Advisory Review
                  
                  **Date**: ${new Date().toISOString().split('T')[0]}
                  **Advisories Found**: ${advisories.data.length}
                  
                  ### Action Required
                  Please review the following security advisories:
                  
                  ${advisories.data.map(advisory => 
                    `- **${advisory.summary}** (${advisory.severity})`
                  ).join('\n')}
                  
                  **Auto-generated by**: Security Monitoring Workflow
                  `,
                  labels: ['security', 'review-required', 'urgent']
                });
              }
            } catch (error) {
              console.log('No security advisories API access or none found');
            }