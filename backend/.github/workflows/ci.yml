name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8.x'

jobs:
  # Code Quality & Security Checks
  quality-checks:
    name: Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./ll
        run: npm ci

      - name: Run ESLint
        working-directory: ./ll
        run: npm run lint

      - name: TypeScript type check
        working-directory: ./ll
        run: npx tsc --noEmit

      - name: Audit dependencies
        working-directory: ./ll
        run: npm audit --audit-level=moderate

      - name: Check for security vulnerabilities
        working-directory: ./ll
        run: npx audit-ci --config .audit-ci.json
        continue-on-error: true

  # Frontend Build & Test
  frontend-build:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        node-version: ['18.x', '20.x']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./ll
        run: npm ci

      - name: Run unit tests
        working-directory: ./ll
        run: npm run test:unit
        continue-on-error: true

      - name: Build application
        working-directory: ./ll
        run: npm run build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.node-version }}
          path: ll/dist/
          retention-days: 7

      - name: Bundle size analysis
        working-directory: ./ll
        run: npx bundlesize
        continue-on-error: true

  # Backend Services Build
  backend-build:
    name: Backend Services Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth, user, restaurant, notification]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache-dependency-path: ${{ matrix.service }}/go.sum

      - name: Build Go service
        working-directory: ./${{ matrix.service }}
        run: |
          go mod download
          go build -v ./...

      - name: Run Go tests
        working-directory: ./${{ matrix.service }}
        run: go test -v ./...
        continue-on-error: true

      - name: Go vet
        working-directory: ./${{ matrix.service }}
        run: go vet ./...

      - name: Run gosec security scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: './${{ matrix.service }}/...'
        continue-on-error: true

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      kafka:
        image: confluentinc/cp-kafka:latest
        env:
          KAFKA_ZOOKEEPER_CONNECT: localhost:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
        ports:
          - 9092:9092

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

      - name: Run integration tests
        run: |
          echo "Integration tests would run here"
          # docker-compose -f docker-compose.test.yml up --abort-on-container-exit
        continue-on-error: true

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./ll
        run: npm ci

      - name: Install Playwright
        working-directory: ./ll
        run: npx playwright install --with-deps

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-20.x
          path: ll/dist/

      - name: Run E2E tests
        working-directory: ./ll
        run: npm run test:e2e
        continue-on-error: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: ll/playwright-report/
          retention-days: 30

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: frontend-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./ll
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-20.x
          path: ll/dist/

      - name: Run Lighthouse CI
        working-directory: ./ll
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        continue-on-error: true

  # Security Scans
  security-scans:
    name: Security Scans
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript, go

  # Deployment (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-tests, performance-tests, security-scans]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-20.x
          path: ll/dist/

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./ll
          scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, performance-tests, security-scans]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-20.x
          path: ll/dist/

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./ll
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}